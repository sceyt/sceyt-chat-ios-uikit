//
//  SceytChatUIKit.swift
//
//
//  Created by Arthur Avagyan on 07.08.24.
//

import Foundation
import SceytChat

public class SceytChatUIKit {
    
    private init() {}
    
    public static let shared = SceytChatUIKit()
    
    public lazy var config = SceytChatUIKit.Config()
    public var theme = SceytChatUIKit.Theme()
    public var formatters = SceytChatUIKit.Formatters()
    public var visualProviders = SceytChatUIKit.VisualProviders()
    public var avatarRenderers = SceytChatUIKit.AvatarRenderers()
    
    public var chatClient: ChatClient {
        ChatClient.shared
    }
    
    public var database: Database {
        return _database
    }
    
    private lazy var _database: Database = {
        if let directory = config.storageConfig.databaseFileDirectory {
            do {
                try FileManager.default.createDirectory(at: directory, withIntermediateDirectories: true)
            } catch {
                print("Error creating directory: \(error.localizedDescription)")
            }
            let dbUrl = directory.appendingPathComponent(config.storageConfig.databaseFilename)
            return PersistentContainer(storeType: .sqLite(databaseFileUrl: dbUrl))
        } else {
            return PersistentContainer(storeType: .inMemory)
        }
    }()
    

    public static func initialize(apiUrl: String, appId: String, clientId: String = "") {
        ChatClient.initialize(apiUrl: apiUrl, appId: appId, clientId: clientId)
        SceytChatUIKit.shared.chatClient.add(delegate: Components.clientConnectionHandler.default, identifier: String(reflecting: ClientConnectionHandler.self))
        shared.channelEventHandler.startEventHandler()
    }
    
    public var isConnected: Bool {
        chatClient.connectionState == .connected
    }
    
    public func connect(token: String) {
        chatClient.connect(token: token)
    }
    
    public func reconnect() -> Bool {
        chatClient.reconnect()
    }
    
    public func disconnect() {
        chatClient.disconnect()
    }
    
    public func registerDevicePushToken(_ pushToken: Data, completion: ((Error?) -> Void)?) {
        chatClient.registerDevicePushToken(pushToken, completion: completion)
    }
    
    public func unregisterDevicePushToken(completion: ((Error?) -> Void)? ) {
        chatClient.unregisterDevicePushToken(completion: completion)
    }
    
    public func logout(completion: @escaping (Bool) -> Void) {
        unregisterDevicePushToken() { [weak self] error in
            if let error {
                logger.debug("Device Token: Received error while removing \(error)")
                completion(false)
            }
            
            logger.debug("Device Token: Removed")
            self?.disconnect()
            UserDefaults.currentUserId = nil
            DataProvider.database.deleteAll()
            completion(true)
        }
    }
    
    public lazy var channelEventHandler: ChannelEventHandler = {
        Components.channelEventHandler
            .init(
                database: database,
                chatClient: chatClient
            )
    }()
    
    public var currentUserId: UserId? {
        if !SceytChatUIKit.shared.chatClient.user.id.isEmpty {
            SceytChatUIKit.shared.chatClient.user.id
        } else {
            UserDefaults.currentUserId
        }
    }
    
    // MARK: - Log Level
    
    /// Configures the logging system by setting the log level for both the SDK's `ChatClient` and the UIKit's `Logger`.
    ///
    /// - Parameters:
    ///   - level: The desired log level, specified using `Logger.LogLevel`.
    ///   - callback: A closure that will be invoked every time a log message is generated by the UIKit's `Logger`.
    ///     - Logger.CallBack parameters:
    ///       - logMessage: The fully formatted log message, including timestamps and contextual information.
    ///       - logLevel: The level of the log message (`Logger.LogLevel`).
    ///       - logString: The original log string provided by the caller.
    ///       - file: The file from which the log function was called.
    ///       - function: The function from which the log function was called.
    ///       - line: The line number from which the log function was called.
    public func setLogger(with level: Logger.LogLevel, callback: @escaping Logger.CallBack) {
        // Set the log level for the SDK's ChatClient using the mapped `sceytLogLevel`.
        ChatClient.setLogLevel(level.sceytLogLevel)
        
        // Set the log level and assign the callback for the UIKit's Logger.
        Logger.setLogLevel(level, callBack: callback)
    }
}
